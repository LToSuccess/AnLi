package com.stx.demo;
import java.util.*;
/*
 * Utility工具类
 * 将不同的功能封装为方法，就是可以直接通过调用方法使用它的功能，而无需考虑具体的功能实现细节
 * 
 * */

 public class Utility{
	  private static Scanner scanner= new Scanner(System.in);
	  /*
	   * 用于界面菜单的选择。该方法读取键盘，如果用户键入’1’-’4’中的任意字符，则方法返回。返回值为用户键入字符。
	   * */
public static char  readMenuSelection() {
	char  c;
	for( ; ;) {
		String str=Utility.readKeyBoard(1);
		c=str.charAt(0);
		if(c!='1'&&c!='2'&&c!='3'&&c!='4') {
			System.out.println("输入错误，请重新输入：");		
		}else break;
	}
	return c;
	
}


private static String readKeyBoard(int limit) {
	String line=" ";
	while(scanner.hasNext()) {
		line=scanner.next();
		if(line.length()<1||line.length()>limit) {
			System.out.println("输入长度（不大于"+limit+"）错误，请重新输入：");
			continue;	
		}
		break;
	}
	return line;
}

public static int readNumber() {
	int n;
	for( ; ;) {
		String str=Utility.readKeyBoard(4);
		try {
			n=Integer.parseInt(str);
			break;
		}catch(Exception e) {
			System.out.print("数字输入错误，请重新输入：");
		}
	}
	return n;
}
public static String readString() {
	String str=Utility.readKeyBoard(8);
	return str;
}

public static char readConfirmSelection() {
	char c;
	for( ; ;) {
		String str=Utility.readKeyBoard(8).toUpperCase();
		c=str.charAt(0);
		if(c=='Y'||c=='N') {
			break;
		}else{
			System.out.print("选择错误，请重新输入：");
		}
	}
	return c;
}
 }